import { jsx as _jsx } from "react/jsx-runtime";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as Ably from 'ably';
import React, { useMemo } from 'react';
const version = '1.2.43';
const canUseSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function';
/**
 * Wrapper around Ably.Realtime.Promise which injects the 'react-hooks' agent
 */
export class Realtime extends Ably.Realtime.Promise {
    constructor(options) {
        let opts;
        if (typeof options === 'string') {
            opts = {
                key: options,
            };
        }
        else {
            opts = Object.assign({}, options);
        }
        opts.agents = { 'react-hooks': version };
        super(opts);
    }
}
export const contextKey = canUseSymbol
    ? Symbol.for('__ABLY_CONTEXT__')
    : '__ABLY_CONTEXT__';
const ctxMap = typeof globalThis !== 'undefined' ? (globalThis[contextKey] = {}) : {};
export function getContext(ctxId = 'default') {
    return ctxMap[ctxId];
}
let hasSentAgent = false;
export const AblyProvider = ({ client, children, options, id = 'default', }) => {
    if (!client && !options) {
        throw new Error('No client or options');
    }
    if (client && options) {
        throw new Error('Provide client or options, not both');
    }
    const realtime = useMemo(() => client || new Realtime(options), [client, options]);
    let context = getContext(id);
    if (!context) {
        context = ctxMap[id] = React.createContext(realtime !== null && realtime !== void 0 ? realtime : 1);
    }
    React.useEffect(() => {
        if (!hasSentAgent) {
            hasSentAgent = true;
            realtime.request('GET', '/time', {
                agent: `react-hooks-time-ping/${version}`,
            });
        }
    });
    // If options have been provided, the client cannot be accessed after the provider has unmounted, so close it
    React.useEffect(() => {
        if (options) {
            return () => {
                realtime.close();
            };
        }
    }, [realtime, options]);
    return _jsx(context.Provider, Object.assign({ value: realtime }, { children: children }));
};
//# sourceMappingURL=AblyProvider.js.map